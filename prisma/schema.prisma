// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户相关模型
model User {
  id             BigInt    @id @default(autoincrement())
  username       String    @unique @db.VarChar(50)
  email          String    @unique @db.VarChar(100)
  passwordHash   String    @map("password_hash") @db.VarChar(255)
  avatarUrl      String?   @map("avatar_url") @db.VarChar(500)
  bio            String?   @db.Text
  role           Role      @default(USER)
  status         UserStatus @default(ACTIVE)
  emailVerified  Boolean   @default(false) @map("email_verified")
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // 关联关系（无数据库外键约束）
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  favorites     Favorite[]
  profile       UserProfile?
  postViews     PostView[]
  notifications Notification[]

  @@index([username])
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model UserProfile {
  userId         BigInt  @id @map("user_id")
  website        String? @db.VarChar(200)
  github         String? @db.VarChar(100)
  twitter        String? @db.VarChar(100)
  location       String? @db.VarChar(100)
  company        String? @db.VarChar(100)
  postsCount     Int     @default(0) @map("posts_count")
  followersCount Int     @default(0) @map("followers_count")
  followingCount Int     @default(0) @map("following_count")

  // 级联删除：删除用户时自动删除用户资料
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("user_profiles")
}

// 内容相关模型
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  slug        String   @unique @db.VarChar(50)
  description String?  @db.Text
  color       String   @default("#007bff") @db.VarChar(7)
  postsCount  Int      @default(0) @map("posts_count")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 应用层关联
  posts Post[]

  @@index([slug])
  @@index([sortOrder])
  @@map("categories")
}

model Post {
  id            BigInt     @id @default(autoincrement())
  title         String     @db.VarChar(200)
  slug          String     @db.VarChar(200)
  summary       String?    @db.Text
  content       String     @db.LongText
  contentHtml   String?    @map("content_html") @db.LongText
  status        PostStatus @default(DRAFT)
  authorId      BigInt     @map("author_id")
  categoryId    Int?       @map("category_id")
  featuredImage String?    @map("featured_image") @db.VarChar(500)
  views         Int        @default(0)
  likesCount    Int        @default(0) @map("likes_count")
  commentsCount Int        @default(0) @map("comments_count")
  wordCount     Int        @default(0) @map("word_count")
  readingTime   Int        @default(0) @map("reading_time")
  publishedAt   DateTime?  @map("published_at")
  deletedAt     DateTime?  @map("deleted_at")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // 级联删除：删除用户时删除其文章，删除分类时将文章分类设为null
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  comments  Comment[]
  favorites Favorite[]
  tags      PostTag[]
  postViews PostView[]

  @@unique([authorId, slug])
  @@index([status])
  @@index([authorId])
  @@index([categoryId])
  @@index([publishedAt])
  @@index([views])
  @@index([createdAt])
  @@index([deletedAt])
  @@fulltext([title, content])
  @@map("posts")
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(50)
  slug       String    @unique @db.VarChar(50)
  color      String    @default("#6c757d") @db.VarChar(7)
  postsCount Int       @default(0) @map("posts_count")
  createdAt  DateTime  @default(now()) @map("created_at")

  // 应用层关联
  posts PostTag[]

  @@index([slug])
  @@index([postsCount])
  @@map("tags")
}

model PostTag {
  postId    BigInt   @map("post_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  // 级联删除：删除文章或标签时删除关联关系
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag  Tag?  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, tagId])
  @@index([tagId])
  @@index([postId])
  @@map("post_tags")
}

// 互动相关模型
model Comment {
  id           BigInt        @id @default(autoincrement())
  postId       BigInt        @map("post_id")
  userId       BigInt        @map("user_id")
  parentId     BigInt?       @map("parent_id")
  content      String        @db.Text
  contentHtml  String?       @map("content_html") @db.Text
  status       CommentStatus @default(PENDING)
  likesCount   Int           @default(0) @map("likes_count")
  repliesCount Int           @default(0) @map("replies_count")
  deletedAt    DateTime?     @map("deleted_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // 级联删除：删除文章时删除评论，删除用户时删除评论，删除父评论时删除子评论
  post    Post?     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("comments")
}

model Like {
  id         BigInt     @id @default(autoincrement())
  userId     BigInt     @map("user_id")
  targetType TargetType @map("target_type")
  targetId   BigInt     @map("target_id")
  createdAt  DateTime   @default(now()) @map("created_at")

  // 级联删除：删除用户时删除其点赞记录
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, targetType, targetId])
  @@index([targetType, targetId])
  @@index([userId])
  @@index([createdAt])
  @@map("likes")
}

model Favorite {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  postId    BigInt   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  // 级联删除：删除用户或文章时删除收藏记录
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt])
  @@map("favorites")
}

model PostView {
  id        BigInt   @id @default(autoincrement())
  postId    BigInt   @map("post_id")
  userId    BigInt?  @map("user_id")
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // 级联删除：删除文章时删除浏览记录，删除用户时设置用户ID为null
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@map("post_views")
}

model Notification {
  id         BigInt             @id @default(autoincrement())
  userId     BigInt             @map("user_id")
  type       NotificationType
  title      String             @db.VarChar(200)
  content    String             @db.Text
  data       Json?
  isRead     Boolean            @default(false) @map("is_read")
  createdAt  DateTime           @default(now()) @map("created_at")

  // 级联删除：删除用户时删除其通知
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// 枚举类型
enum Role {
  USER
  AUTHOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  DELETED
}

enum TargetType {
  POST
  COMMENT
}

enum NotificationType {
  COMMENT
  LIKE
  FOLLOW
  SYSTEM
}
